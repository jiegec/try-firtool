// Generated by CIRCT unknown git version
// VCS coverage exclude_file
module mem_combMem(	// src/main/scala/Memory.scala:26:24
  input  [4:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [63:0] RW0_wdata,
  output [63:0] RW0_rdata
);

  reg [63:0] Memory[0:31];	// src/main/scala/Memory.scala:26:24
  reg [4:0]  _GEN;	// src/main/scala/Memory.scala:26:24
  reg        _GEN_0;	// src/main/scala/Memory.scala:26:24
  reg        _GEN_1;	// src/main/scala/Memory.scala:26:24
  always @(posedge RW0_clk) begin	// src/main/scala/Memory.scala:26:24
    _GEN <= RW0_addr;	// src/main/scala/Memory.scala:26:24
    _GEN_0 <= RW0_en;	// src/main/scala/Memory.scala:26:24
    _GEN_1 <= RW0_wmode;	// src/main/scala/Memory.scala:26:24
    if (RW0_en & RW0_wmode)	// src/main/scala/Memory.scala:26:24
      Memory[RW0_addr] <= RW0_wdata;	// src/main/scala/Memory.scala:26:24
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 64'bx;	// src/main/scala/Memory.scala:26:24
endmodule

module Memory1RW(	// <stdin>:3:10
  input         clock,	// <stdin>:4:11
                reset,	// <stdin>:5:11
  input  [4:0]  addr,	// src/main/scala/Memory.scala:21:16
  input  [63:0] wdata,	// src/main/scala/Memory.scala:23:17
  input         we,	// src/main/scala/Memory.scala:24:14
  output [63:0] rdata	// src/main/scala/Memory.scala:22:17
);

  mem_combMem mem_ext (	// src/main/scala/Memory.scala:26:24
    .RW0_addr  (addr),
    .RW0_en    (1'h1),	// <stdin>:3:10
    .RW0_clk   (clock),
    .RW0_wmode (we),
    .RW0_wdata (wdata),
    .RW0_rdata (rdata)
  );
endmodule

